package com.qaguild.dbeaver.processors.jdbi;

import com.qaguild.dbeaver.annotations.Column;
import com.qaguild.dbeaver.annotations.Id;
import com.qaguild.dbeaver.processors.AbstractProcessor;
import com.qaguild.dbeaver.processors.Utils;
import org.jdbi.v3.core.Jdbi;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

public class SaveEntityProcessor extends AbstractProcessor<Jdbi> {

    public SaveEntityProcessor(Jdbi executor) {
        super(executor);
    }

    @Override
    public String getName() {
        return "save";
    }

    @Override
    public Object process(Method method, Class<?> clazz, Object[] args) {
        String table = Utils.getTableName(clazz);
        ParameterData parameterData = getQueryParams(args[0]);

        String query = String.format("INSERT INTO %s(%s) VALUES(%s)",
                table,
                parameterData.getFields(),
                parameterData.getValues());

        return executor.withHandle(h -> h.execute(query));
    }

    private ParameterData getQueryParams(Object parameter) {
        List<String> values = new ArrayList<>();
        List<String> fields = new ArrayList<>();
        Field[] declaredFields = parameter.getClass().getDeclaredFields();

        for (Field field : declaredFields) {
            field.setAccessible(true);

            if (isAutogeneratedId(field)) {
                continue;
            }

            String fieldName = getFieldName(field);
            String fieldValue = getFieldValue(field, parameter);

            values.add(fieldValue);
            fields.add(fieldName);
        }
        return new ParameterData(fields, values);
    }

    private String getFieldValue(Field field, Object parameter) {
        try {
            String value = field.get(parameter).toString();
            if (field.getType() == String.class) {
                return String.format("'%s'", value);
            }
            return value;
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    }

    private String getFieldName(Field field) {
        String fieldName = field.getName();
        Column annotation = field.getDeclaredAnnotation(Column.class);
        if (annotation != null) {
            return annotation.value();
        }
        return fieldName;
    }

    private boolean isAutogeneratedId(Field field) {
        Id id = field.getDeclaredAnnotation(Id.class);
        return id != null && id.generated();
    }
}

class ParameterData {

    private final List<String> fields;
    private final List<String> values;

    public ParameterData(List<String> fields, List<String> values) {
        this.fields = fields;
        this.values = values;
    }

    public String getFields() {
        return String.join(",", fields);
    }

    public String getValues() {
        return String.join(",", values);
    }
}